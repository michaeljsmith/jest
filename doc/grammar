//program = block "." .
//
//block =
//    ["const" ident "=" number {"," ident "=" number} ";"]
//    ["var" ident {"," ident} ";"]
//    {"procedure" ident ";" block ";"} statement .
//
//statement =
//    [ident ":=" expression
//    | "call" ident
//    | "begin" statement {";" statement} "end"
//    | "if" condition "then" statement
//    | "while" condition "do" statement
//    ] .
//
//condition =
//    "odd" expression
//    | expression ("="|"#"|"<"|"<="|">"|">=") expression .
//
//expression = ["+"|"-"] term {("+"|"-") term} .
//
//term = factor {("*"|"/") factor} .
//
//factor =
//    ident
//    | number
//    | "(" expression ")" .

// LR
module = {define}

statement =
	define
	| expression

expression =
	ident
	| call

call =
	"<" ident {statement} ">"

define =
	target "=" expression

target =
	ident
	| prototype

prototype =
	"<" ident {parameter} ">"

parameter =
	ident ":" ident

// LL
module = {define}

statement =
	symbol_statement
	| form_statement

symbol_statement =
	symbol_define
	| symbol_expression

symbol_define =
	ident "=" expression

symbol_expression =
	ident

form_statement =
	form_define
	| form_expression

form_define =
	prototype "=" expression

prototype =
	"<" ident {parameter} ">"

parameter =
	ident ":" ident

expression =
	ident
	| call

call =
	"<" ident {statement} ">"
