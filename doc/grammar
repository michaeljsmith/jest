// LR
module = {define}

statement =
	define
	| expression

expression =
	identifier
	| call

call =
	"<" identifier {statement} ">"

define =
	target "=" expression

target =
	identifier
	| prototype

prototype =
	"<" identifier {parameter} ">"

parameter =
	identifier ":" identifier

// LL
module = {define}

define =
	form_define
	| symbol_define

statement =
	form_statement
	| symbol_statement

symbol_statement =
	identifier ["=" expression]

symbol_define =
	identifier "=" expression

form_statement =
	"<" form_statement_contents

form_statement_contents =
	identifier form_statement_tail
	| expression {statement} ">"

form_statement_tail =
	">" [define_tail]
	| identifier non_thunk_tail
	| {statement} ">"

non_thunk_tail =
	":" expression {parameter} ">" define_tail
	| {statement} ">"

define_tail =
	"=" expression

form_expression_tail =
	{statement} ">"

form_define =
	"<" expression {parameter} ">" = expression

parameter =
	identifier ":" identifier

expression =
	identifier
	| form_expression

form_expression =
	"<" expression form_expression_tail
