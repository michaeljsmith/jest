#(define (ui (string name))
#  (form
#	(label name)
#	(field name)))
#
#(define (run-instance (window frame))
#  (create-window frame)
#  (show-window frame)
#  (run-window frame)
#  (hide-window frame)
#  (destroy-window frame))
#
#(define (frame (string title) (window contents))
#  (primitive))
#
#(define (create-window ((frame string window) frame))
#  (platform-create-frame (get (member frame title)))
#  (create-window (get (member frame contents))))

(define (ui (string name))
  (form
	(label name)
	(field name)))

(define (print ((form text-widget text-widget) form))
  (print "begin form\n")
  (print (get (member form first)))
  (print (get (member form second)))
  (print "end form\n"))

(define (print ((label string) label))
  (print (get (member label text))))

(define (print ((field string) field))
  (print "[")
  (print (get (member field text)))
  (print "]\n"))

()

(define (evaluate-jest expression)

  (define namespace (gensym))
  (define safe-expression
    (morph namespace expression))
  (define define-jest (morph namespace define))

  (syntax (,define-jest ('operator . 'args) 'expression)
    (define (composite ,operator ,@(map car args))
      (lambda (operator ,@(map cadr args))
        (eval-jest (,operator ,expression)))))

  (syntax (eval-jest ('operator . 'args))

  ,safe-expression)

#  (syntax (,define-jest ('operator . 'args) 'expression)
#	,(scope
#	   (define (compile-arg ('type 'name)) ('type))
#	   (define arg-types (map compile-arg args))
#	   `(define (eval-type (',operator . ',arg-types))
#		  `(type ,@,@args
#				,,expression))))

#  (syntax (eval-type ('operator ('head . 'args)))

#  (syntax (eval-type ('operator 'expression))
#    (define (weave 'expr)
#      (list operator expr))
#    (define (weave ('head . 'tail))
#      (list operator (cons head (map weave tail))))
#    (weave expression))
